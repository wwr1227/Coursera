/*************************************************************************
 *
 * Name: Dongyu Wang Email: wwr1227@gmail.com
 * Compilation: javac Deque.java
 * 
 *************************************************************************/
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Deque<Item> implements Iterable<Item> {

 private class Node {
  private Item item;
  private Node next;
  private Node prev;

  public Node(Item item) {
   this.item = item;
  }
 }

 private int size;
 private Node head;
 private Node tail;

 public Deque() {
  head = null;
  tail = null;
  size = 0;
 }

 public boolean isEmpty() {
  // is the deque empty?
  return size <= 0;
 }

 public int size() {
  return size;
 }

 public void addFirst(Item item) {
  // insert the item at the front
  if (item == null) {
   throw new NullPointerException();
  }
  Node oldHead = head;
  head = new Node(item);
  head.next = oldHead;
  size++;
  if (size > 1)
   oldHead.prev = head;
  else
   tail = head;
 }

 public void addLast(Item item) {
  // insert the item at the end
  if (item == null) {
   throw new NullPointerException();
  }
  Node oldTail = tail;
  tail = new Node(item);
  tail.prev = oldTail;
  size++;
  if (size > 1)
   oldTail.next = tail;
  else
   head = tail;
 }

 public Item removeFirst() {
  // delete and return the item at the front
  if (isEmpty()) {
   throw new NoSuchElementException();
  }
  Item item = head.item;
  head = head.next;
  size--;
  if (size > 0)
   head.prev = null;
  else
   tail = null;
  return item;
 }

 public Item removeLast() {
  // delete and return the item at the end
  if (isEmpty()) {
   throw new NoSuchElementException();
  }
  Item item = tail.item;
  tail = tail.prev;
  size--;
  if (size > 0)
   tail.next = null;
  else
   head = null;
  return item;
 }

 public Iterator<Item> iterator() {
  // return an iterator over items in order from front to end
  return new DequeIterator();
 }

 private class DequeIterator implements Iterator<Item> {

  private Node current = head.next;

  public boolean hasNext() {
   return current != head;
  }

  public void remove() {
   throw new UnsupportedOperationException();
  }

  public Item next() {
   if (!hasNext()) {
    throw new NoSuchElementException();
   }
   Item item = current.item;
   current = current.next;
   return item;
  }
 }

 public static void main(String[] args) {
  Deque<String> deque = new Deque<String>();
  deque.addFirst("1");
  deque.addFirst("2");
  StdOut.println(deque.removeLast());
  deque.addFirst("3");
  StdOut.println(deque.removeLast());
  StdOut.println(deque.removeLast());
  deque.addFirst("4");
  StdOut.println(deque.removeLast());
 }
}